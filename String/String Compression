Given an array of characters, compress it in-place.

The length after compression must always be smaller than or equal to the original array.

Every element of the array should be a character (not int) of length 1.

After you are done modifying the input array in-place, return the new length of the array.

Example 1:
Input:
["a","a","b","b","c","c","c"]

Output:
Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

Explanation:
"aa" is replaced by "a2". "bb" is replaced by "b2". "ccc" is replaced by "c3".
Example 2:
Input:
["a"]

Output:
Return 1, and the first 1 characters of the input array should be: ["a"]

Explanation:
Nothing is replaced.
Example 3:
Input:
["a","b","b","b","b","b","b","b","b","b","b","b","b"]

Output:
Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].

Explanation:
Since the character "a" does not repeat, it is not compressed. "bbbbbbbbbbbb" is replaced by "b12".
Notice each digit has it's own entry in the array.

python:
	class Solution:
    def compress(self, chars):
        """
        :type chars: List[str]
        :rtype: int
        """
        ptr, wptr = 0, 0
        while ptr < len(chars):
            ch, f = chars[ptr], 0
            while ptr < len(chars) and chars[ptr] == ch:
                ptr, f = ptr+1, f+1
            chars[wptr], wptr = ch, wptr+1
            if f > 1:
                for i in str(f):
                    chars[wptr], wptr = i, wptr+1
        return wptr

C++:
 	class Solution {
	public:
    	int compress(vector<char>& chars) {
        	int ptr = 0, wptr = 0;
        	while(ptr < chars.size()){
            	char ch = chars[ptr];
            	int f = 0;
            	while(ptr < chars.size() && chars[ptr] == ch){
                	ptr++;
                	f++;
            	}
            	chars[wptr] = ch;
            	wptr++;
            	if(f > 1){
                	string s = to_string(f);
                	for(char c: s){
                    	chars[wptr] = c;
                    	wptr++;
                	}
            	}
        	}
        	return wptr;
    	}
	};